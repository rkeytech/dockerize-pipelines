trigger:
  branches:
    include:
      - feature/*
  paths:
    include:
      - src/*
      - azure-pipelines.yml

pr:
  autoCancel: true
  branches:
    include:
      - develop
      - feature/*
  paths:
    include:
      - src/*
      - azure-pipelines.yml

name: 'Dockerize_APIs_CI_Pipeline'

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: "Release"
  artifactName: "dockerizeAPIs-drop"
  artifactDirProject: "dockerizeAPIs"
  buildPathRootProject: "src"
  dockerfileContext: "src"
  buildPathProjects: "$(buildPathRootProject)/**/*.csproj"
  # dockerfilePathProjects: "$(buildPathRootProject)/**/Dockerfile"
  registryUsername: 'timoszach'

stages:
- stage: Dockerize_APIs_CI
  displayName: 'CI for Dockerize APIs Solution'
  jobs:
  - job: dockerize_apis_build_and_publish
    displayName: 'Build and Publish Dockerize APIs Project'

    variables:
      ${{ if eq(variables['configuration'], 'Debug') }}:
        buildConfiguration: "Debug"
    
    steps:
    - checkout: self
      displayName: 'Checkout code'
      clean: "true"
    - task: NuGetToolInstaller@1
      displayName: 'Install Nuget'
      inputs:
        versionSpec: ">=6.2.0"
        checkLatest: true
    - task: UseDotNet@2
      displayName: 'Install DotNet'
      inputs:
        packageType: 'sdk'
        version: 6.x
    - task: DotNetCoreCLI@2
      displayName: 'Install DotNet Tools'
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'restore'
    - script: |
        dotnet tool run dotnet-gitversion /output buildserver
      name: Run_dotnet_gitversion
      displayName: 'Run GitVersion Tool'
    - script: |
        echo ##vso[task.setvariable variable=gitVer;isOutput=true]$(GitVersion.MajorMinorPatch)
      name: setGitVer
      displayName: 'Set gitVer variable for next jobs' 
    - task: DotNetCoreCLI@2
      displayName: 'Projects | Restore'
      inputs:
        command: 'restore'
        projects: '$(buildPathProjects)'
        feedsToUse: 'config'
        nugetConfigPath: 'NuGet.Config'
    - task: DotNetCoreCLI@2
      displayName: 'Projects | Build'
      inputs:
        command: 'build'
        projects: '$(buildPathProjects)'
        arguments: "--no-restore --configuration $(buildConfiguration) -p:Version=$(GitVersion.SemVer);FileVersion=$(GitVersion.MajorMinorPatch)"
    - task: DotNetCoreCLI@2
      displayName: 'Projects | Publish'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(buildPathProjects)'
        arguments: "--no-build --no-restore --configuration $(buildConfiguration) --framework net6.0 --output $(Build.ArtifactStagingDirectory)/$(artifactDirProject)"
        zipAfterPublish: true
    - task: PublishBuildArtifacts@1
      displayName: 'Projects | Publish Artifacts'
      inputs:
        PathtoPublish: "$(Build.ArtifactStagingDirectory)/$(artifactDirProject)"
        publishLocation: Container
        ArtifactName: '$(artifactName)'

  - job: dockerize_myapi1_build_and_push_docker
    displayName: 'Build and Push MyAPI1 to Docker Hub'
    dependsOn: [dockerize_apis_build_and_publish]

    variables:
      - name: imageName
        value: myapi1
      - name: dockerfilePath
        value: "$(dockerfileContext)/MyAPI1/Dockerfile"
      - name: gitVer
        value: $[ dependencies.dockerize_apis_build_and_publish.outputs['setGitVer.gitVer'] ]
    steps:
    - task: Docker@2
      displayName: 'Login to Docker Hub'
      inputs:
        containerRegistry: 'docker-hub'
        command: 'login'
    - task: Docker@2
      inputs:
        containerRegistry: 'docker-hub'
        repository: '$(registryUsername)/$(imageName)'
        command: 'build'
        Dockerfile: '$(dockerfilePath)'
        tags: '$(gitVer)'
    - task: Docker@2
      inputs:
        containerRegistry: 'docker-hub'
        repository: '$(registryUsername)/$(imageName)'
        command: 'push'
        tags: '$(gitVer)'
    - task: Docker@2
      inputs:
        containerRegistry: 'docker-hub'
        command: 'logout'

  - job: dockerize_myapi2_build_and_push_docker
    displayName: 'Build and Push MyAPI2 to Docker Hub'
    dependsOn: [dockerize_apis_build_and_publish]

    variables:
      - name: imageName
        value: myapi2
      - name: dockerfilePath
        value: "$(dockerfileContext)/MyAPI2/Dockerfile"
      - name: gitVer
        value: $[ dependencies.dockerize_apis_build_and_publish.outputs['setGitVer.gitVer'] ]
    steps:
    - task: Docker@2
      displayName: 'Login to Docker Hub'
      inputs:
        containerRegistry: 'docker-hub'
        command: 'login'
    - task: Docker@2
      inputs:
        containerRegistry: 'docker-hub'
        repository: '$(registryUsername)/$(imageName)'
        command: 'build'
        Dockerfile: '$(dockerfilePath)'
        tags: '$(gitVer)'
    - task: Docker@2
      inputs:
        containerRegistry: 'docker-hub'
        repository: '$(registryUsername)/$(imageName)'
        command: 'push'
        tags: '$(gitVer)'
    - task: Docker@2
      inputs:
        containerRegistry: 'docker-hub'
        command: 'logout'
