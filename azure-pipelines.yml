trigger:
  branches:
    include:
      - feauter/*
  paths:
    include:
      - src/*
      - azure-pipelines.yml

pr:
  autoCancel: true
  branches:
    include:
      - develop
      - feature/*
  paths:
    include:
      - src/*
      - azure-pipelines.yml
  drafts: false

name: 'Dockerize_APIs_CI_Pipeline'

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: "Release"
  artifactName: "dockerizeAPIs-drop"
  artifactDirProject: "dockerizeAPIs"
  buildPathRootProject: "src/"
  buildPathProject: "$(buildPathRootProject)/**/*.csproj"

stages:
- stage: Dockerize_APIs_CI
  jobs:
  - job: dockerize_apis_ci
    displayName: 'CI for Dockerize APIs Project'

    variables:
      ${{ if eq(variables['configuration'], 'Debug') }}:
        buildConfiguration: "Debug"
    
    steps:
    - checkout: self
      displayName: 'Checkout code'
      clean: "true"
    - task: NuGetToolInstaller@1
      displayName: 'Install Nuget'
      inputs:
        versionSpec: ">=6.2.0"
        checkLatest: true
    - task: UseDotNet@2
      displayName: 'Install DotNet'
      inputs:
        packageType: 'sdk'
    - task: DotNetCoreCLI@2
      displayName: 'Install DotNet Tools'
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'restore'
    - script: |
        dotnet tool run dotnet-gitversion $(Build.Repository.LocalPath) /output buildserver
      name: Run_dotnet_gitversion
      displayName: 'Run GitVersion Tool'
    - task: DotNetCoreCLI@2
      displayName: 'Projects | Restore'
      inputs:
        command: 'restore'
        projects: '$(buildPathProject)'
        feedsToUse: 'config'
        nugetConfigPath: 'NuGet.Config'
    - task: DotNetCoreCLI@2
      displayName: 'Projects | Build'
      inputs:
        command: 'build'
        projects: '$(buildPathProject)'
        arguments: "--no-restore --configuration $(buildConfiguration) -p:Version=$(GitVersion.SemVer);FileVersion=$(GitVersion.MajorMinorPatch)"
    - task: DotNetCoreCLI@2
      displayName: 'Projects | Publish'
      inputs:
        command: 'publish'
        publishWebProjects: true
        projects: '$(buildPathProject)'
        arguments: "--no-build --no-restore --configuration $(buildConfiguration) --framework net6.0 --output $(Build.ArtifactStagingDirectory)/$(artifactDirProject)"
        zipAfterPublish: true
    - task: PublishBuildArtifacts@1
      displayName: 'Projects | Publish Artifacts'
      inputs:
        PathtoPublish: "$(Build.ArtifactStagingDirectory)/$(artifactDirProject)"
        publishLocation: Container
        ArtifactName: '$(artifactName)'