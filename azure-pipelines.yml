# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main
      #- develop
      #- feature/azure*

variables:
  buildConfiguration: "Release"
  artifactName: "testing-drop"
  artifactDirProject: "Project"
  buildPathRootProject: "MyAPI1"
  buildPathProject: "$(buildPathRootProject)/*.csproj"
  shouldRestoreProject: true
  buildVersion: ''
  fileVersion: ''

jobs:
  - job: TestAzurePipeline
    displayName: "Test Azure Pipeline"
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NuGetToolInstaller@1
      inputs:
        versionSpec: '6.x'

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '6.x'

    - checkout: self
      clean: true

    - task: DotNetCoreCLI@2
      displayName: 'Install GitVersion'
      inputs:
        command: custom
        custom: tool
        arguments: 'install --global GitVersion.Tool --version 5.*'

    - task: PowerShell@2
      displayName: 'Set Build Version from GitVersion'
      inputs:
        targetType: inline
        script: |
          $buildVersion = dotnet-gitversion /output json /showvariable SemVer
          $fileVersion = dotnet-gitversion /output json /showvariable MajorMinorPatch
          echo $buildVersion
          echo $fileVersion
          echo "##vso[task.setvariable variable=buildVersion]$buildVersion"
          echo "##vso[task.setvariable variable=fileVersion]$fileVersion"
          $env:BUILD_VER = $fileVersion
          echo "$env:BUILD_VER"

    - script: echo %Action%%BuildVersion%
      displayName: "Solution | Set build version"
      env:
        Action: "##vso[build.updatebuildnumber]"
        BuildVersion: $(buildVersion)

    - task: DotNetCoreCLI@2
      displayName: 'Project | Restore'
      inputs:
        command: 'restore'
        projects: '$(buildPathProject)'
        feedsToUse: 'config'
        nugetConfigPath: 'NuGet.Config'

    - task: DotNetCoreCLI@2
      displayName: 'Project | Build'
      inputs:
        command: 'build'
        projects: '$(buildPathProject)'
        arguments: "--configuration $(buildConfiguration) -p:Version=$(buildVersion);FileVersion=$(fileVersion)"
    - task: DotNetCoreCLI@2
      displayName: 'Project | Publish'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(buildPathProject)'
        arguments: '--no-build --no-restore --configuration $(buildConfiguration) --framework net6.0 --output $(build.artifactstagingdirectory)/$(artifactDirProject)'
        zipAfterPublish: true
    - task: PublishBuildArtifacts@1
      displayName: 'Project | Publish Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(artifactDIrProject)'
        ArtifactName: '$(artifactName)'
        publishLocation: Container
      enabled: true
    - task: DotNetCoreCLI@2
      displayName: 'Project | Pack'
      inputs:
        command: 'pack'
        packagesToPack: "$(buildPathProject)"
        packDirectory: "$(build.artifactstagingdirectory)/packages/$(artifactDirProject)"
        nobuild: true
        includesymbols: true
        includesource: true
        versioningScheme: byEnvVar
        versionEnvVar: "BUILD_VER"
    - task: DotNetCoreCLI@2
      displayName: 'Project | Nuget Push'
      inputs:
        command: 'push'
        packagesToPush: "$(build.artifactstagingdirectory)/packages/$(artifactDirProject)/*.nupkg"
        nuGetFeedType: 'internal'
        publishVstsFeed: 'e632e806-6077-41a6-8789-41cc36178f28'
      continueOnError: true
