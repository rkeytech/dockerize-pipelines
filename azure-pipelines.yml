trigger:
  branches:
    include:
      - feature/*
  paths:
    include:
      - src/*
      - azure-pipelines.yml

pr:
  autoCancel: true
  branches:
    include:
      - develop
      - feature/*
  paths:
    include:
      - src/*
      - azure-pipelines.yml
  drafts: false

name: 'Dockerize_APIs_CI_Pipeline'

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: "Release"
  artifactName: "dockerizeAPIs-drop"
  artifactDirProject: "dockerizeAPIs"
  buildPathRootProject: "src"
  contextPathRootProject: "src"
  buildPathProject: "$(buildPathRootProject)/**/*.csproj"
  dockerPathProject: "$(buildPathRootProject)/**/Dockerfile"


stages:
- stage: Dockerize_APIs_CI
  jobs:
  - job: dockerize_apis_ci_build
    displayName: 'CI for Build Dockerize APIs Projects'

    variables:
      ${{ if eq(variables['configuration'], 'Debug') }}:
        buildConfiguration: "Debug"
    
    steps:
    - checkout: self
      displayName: 'Checkout code'
      clean: "true"
    - task: NuGetToolInstaller@1
      displayName: 'Install Nuget'
      inputs:
        versionSpec: ">=6.2.0"
        checkLatest: true
    - task: UseDotNet@2
      displayName: 'Install DotNet'
      inputs:
        packageType: 'sdk'
        version: 6.x
    - task: DotNetCoreCLI@2
      displayName: 'Install DotNet Tools'
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'restore'
    - script: |
        dotnet tool run dotnet-gitversion /output buildserver
      name: Run_dotnet_gitversion
      displayName: 'Run GitVersion Tool'
    - script: |
       echo "##vso[task.setvariable variable=gitVer;isOutput=true]$(GitVersion.MajorMinorPatch)"
      name: setGitVer
      displayName: Set gitVer variable for next jobs
    - task: DotNetCoreCLI@2
      displayName: 'Projects | Restore'
      inputs:
        command: 'restore'
        projects: '$(buildPathProject)'
        feedsToUse: 'config'
        nugetConfigPath: 'NuGet.Config'
    - task: DotNetCoreCLI@2
      displayName: 'Projects | Build'
      inputs:
        command: 'build'
        projects: '$(buildPathProject)'
        arguments: "--no-restore --configuration $(buildConfiguration) -p:Version=$(GitVersion.SemVer);FileVersion=$(GitVersion.MajorMinorPatch)"
    - task: DotNetCoreCLI@2
      displayName: 'Projects | Publish'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(buildPathProject)'
        arguments: "--no-build --no-restore --configuration $(buildConfiguration) --framework net6.0 --output $(Build.ArtifactStagingDirectory)/$(artifactDirProject)"
        zipAfterPublish: true
    - task: PublishBuildArtifacts@1
      displayName: 'Projects | Publish Artifacts'
      inputs:
        PathtoPublish: "$(Build.ArtifactStagingDirectory)/$(artifactDirProject)"
        publishLocation: Container
        ArtifactName: '$(artifactName)'
  - job: dockerize_apis_ci_docker
    displayName: 'CI for Docker Support on Dockerize APIs Projects'
    dependsOn: [dockerize_apis_ci_build]

    variables:
      - name: gitVer
        value: $[ dependencies.dockerize_apis_ci_build.outputs['setGitVer.gitVer'] ]
      - name: imageName
        value: myapi1
      - name: dockerHub
        value: docker-hub

    steps:
    - checkout: self
      displayName: 'Checkout code'
      clean: "true"
    - script: |
       echo "$(gitVer)"
      displayName: Echo gitVer
    # - task: UseDotNet@2
    #   displayName: 'Install DotNet'
    #   inputs:
    #     packageType: 'sdk'
    #     version: 6.x
    # - task: DotNetCoreCLI@2
    #   displayName: 'Install DotNet Tools'
    #   inputs:
    #     command: 'custom'
    #     custom: 'tool'
    #     arguments: 'restore'
    # - script: |
    #     dotnet tool run dotnet-gitversion /output buildserver
    #   name: Run_dotnet_gitversion
    #   displayName: 'Run GitVersion Tool'
    - task: Docker@2
      displayName: Login to Docker Hub
      inputs:
        command: login
        containerRegistry: docker-hub
    - task: Docker@2
      displayName: 'Docker Build Images'
      inputs:
        command: 'build'
        Dockerfile: 'src/MyAPI1/Dockerfile'
        buildContext: 'src'
        tags: |
          $(gitVer)
    - task: Docker@2
      displayName: 'Docker Push Images'
      inputs:
        containerRegistry: 'docker-hub'
        repository: timoszach/dockerize-dotnet-apis
        command: 'push'
        tags: |
          $(gitVer)

    # - task: Docker@2
    #   displayName: Build and Push Container
    #   inputs:
    #     containerRegistry: 'docker-hub'
    #     repository: 'timoszach/dockerize-dotnet-apis'
    #     command: 'buildAndPush'
    #     Dockerfile: 'src/MyAPI1/Dockerfile'
    #     buildContext: 'src'
    #     tags: '$(gitVer)'
    - task: Docker@2
      displayName: Logout of Docker Hub
      inputs:
        command: logout
        containerRegistry: docker-hub
